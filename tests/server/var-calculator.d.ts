import { Insumos, CompilerOptions } from "expre-parser";
import { Client, OperativoGenerator, Relacion, Variable } from "operativos";
import { AppVarCalType } from "./app-varcal";
import { ExpressionContainer } from "./expression-container";
import { VariableCalculada } from "./types-varcal";
export declare class VarCalculator extends OperativoGenerator {
    app: AppVarCalType;
    private allSqls;
    private drops;
    private inserts;
    private bloquesVariablesACalcular;
    private funGeneradora;
    private nombreFuncionGeneradora;
    constructor(app: AppVarCalType, client: Client, operativo: string);
    fetchDataFromDB(): Promise<void>;
    getInsumos(expression: string): Insumos;
    getWrappedExpression(expression: string | number, pkExpression: string, options: CompilerOptions): string;
    getAggregacion(f: string, exp: string): string;
    getTDFor(v: VariableCalculada): import("operativos").TablaDatos;
    protected optionalRelations: Relacion[];
    private validateAliases;
    private getValidAliases;
    private validateFunctions;
    private validateInsumos;
    private validateOverwritingNames;
    private validateVars;
    protected validateVar(varName: string): Variable;
    private checkFoundVarsForErrors;
    private findValidVars;
    protected getAliasIfOptionalRelation(varName: string): Relacion;
    private addMainTD;
    protected prepareEC(ec: ExpressionContainer): any;
    private setInsumos;
    protected filterOrderedTDs(ec: ExpressionContainer): void;
    protected buildClausulaWhere(ec: ExpressionContainer): string;
    protected buildClausulaFrom(ec: ExpressionContainer): string;
    calculate(): Promise<string>;
    private preCalculate;
    private sentenciaUpdate;
    buildFROMClausule(txtMargen: string): string;
    buildWHEREClausule(txtMargen: string): string;
    const sufijo_agregacion: string;
    private buildSETClausule;
    private addAliasesToExpression;
    separarEnGruposOrdenados(): void;
    private sortCalcVariablesByDependency;
    private findNewDefinedVars;
    private checkInsumos;
    private checkAndPushVar;
    private isADefinedVarWithValidPrefix;
    getTDCalculadas(): import("operativos").TablaDatos[];
    getVarsCalculadas(): VariableCalculada[];
    getNonCalcVars(): Variable[];
    getRelevamientoVars(): Variable[];
    parseCalcVarExpressions(): void;
    getFinalSql(): string;
    generateSchemaAndLoadTableDefs(): Promise<void>;
    private generateDropsAndInserts;
    private armarFuncionGeneradora;
}
//# sourceMappingURL=var-calculator.d.ts.map